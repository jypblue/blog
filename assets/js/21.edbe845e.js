(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{216:function(s,t,a){"use strict";a.r(t);var n=a(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"_10-regular-expression-matching"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-regular-expression-matching","aria-hidden":"true"}},[s._v("#")]),s._v(" 10. Regular Expression Matching")]),s._v(" "),a("h3",{attrs:{id:"tags"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tags","aria-hidden":"true"}},[s._v("#")]),s._v(" Tags")]),s._v(" "),a("ol",[a("li",[s._v("Dynamic Programming")]),s._v(" "),a("li",[s._v("Backtracking")]),s._v(" "),a("li",[s._v("String")])]),s._v(" "),a("blockquote",[a("p",[s._v("Implement regular expression matching with support for '.' and '*'.")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('\'.\' Matches any single character.\n\'*\' Matches zero or more of the preceding element.\n>\nThe matching should cover the entire input string (not partial).\n>\nThe function prototype should be:\nbool isMatch(const char *s, const char *p)\n>\nSome examples:\nisMatch("aa","a") → false\nisMatch("aa","aa") → true\nisMatch("aaa","aa") → false\nisMatch("aa", "a*") → true\nisMatch("aa", ".*") → true\nisMatch("ab", ".*") → true\nisMatch("aab", "c*a*b") → true\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h3",{attrs:{id:"题意："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题意：","aria-hidden":"true"}},[s._v("#")]),s._v(" 题意：")]),s._v(" "),a("p",[s._v('实现支持 "." 和 "*" 的正则表达式匹配')]),s._v(" "),a("h3",{attrs:{id:"js实现："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js实现：","aria-hidden":"true"}},[s._v("#")]),s._v(" Js实现：")]),s._v(" "),a("h4",{attrs:{id:"复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂度","aria-hidden":"true"}},[s._v("#")]),s._v(" 复杂度")]),s._v(" "),a("p",[s._v("时间复杂度O(n"),a("sup",[s._v("2")]),s._v(")")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{attrs:{class:"token function-variable function"}},[s._v("isMatch")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("function")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{attrs:{class:"token comment"}},[s._v("//return matches(s, p);")]),s._v("\n    "),a("span",{attrs:{class:"token comment"}},[s._v("// if pattern is empty - whole string should be empty to match")]),s._v("\n  "),a("span",{attrs:{class:"token comment"}},[s._v("//如果模式是空的-匹配到的整个字符串也应该是空的")]),s._v("\n  "),a("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" s"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[s._v("// retrieve 2nd character of the pattern")]),s._v("\n  "),a("span",{attrs:{class:"token comment"}},[s._v("//检索模式的第二个字符")]),s._v("\n  "),a("span",{attrs:{class:"token keyword"}},[s._v("let")]),s._v(" nextChar "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("1")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("?")]),s._v(" p"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("charAt")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token number"}},[s._v("1")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('""')]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{attrs:{class:"token keyword"}},[s._v("let")]),s._v(" t "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("?")]),s._v(" s"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("charAt")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{attrs:{class:"token keyword"}},[s._v("let")]),s._v(" pf "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" p"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("charAt")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[s._v("// if 2nd char is not '*' - it means that we are checking if next char in string matches with next char in pattern")]),s._v("\n  "),a("span",{attrs:{class:"token comment"}},[s._v("// and recursively run the code starting from +1 char in both pattern/string")]),s._v("\n  "),a("span",{attrs:{class:"token comment"}},[s._v("//")]),s._v("\n  "),a("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token string"}},[s._v('"*"')]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("!==")]),s._v(" nextChar"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" pf"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pf "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'.'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" t "),a("span",{attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v("\n      "),a("span",{attrs:{class:"token function"}},[s._v("isMatch")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("substring")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token number"}},[s._v("1")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("substring")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token number"}},[s._v("1")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" pf"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pf "),a("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'.'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" t "),a("span",{attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{attrs:{class:"token comment"}},[s._v("// check if current string matches tail part of the pattern (+2 symbols)")]),s._v("\n      "),a("span",{attrs:{class:"token comment"}},[s._v("//检查当前S是否匹配模式的尾部（+ 2个符号）")]),s._v("\n      "),a("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token function"}},[s._v("isMatch")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("substring")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token number"}},[s._v("2")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),a("span",{attrs:{class:"token comment"}},[s._v("// cut first symbol in original string and repeat the check in the loop")]),s._v("\n      "),a("span",{attrs:{class:"token comment"}},[s._v("//在原始S中切割第一个符号并在循环中重复检查")]),s._v("\n      s "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" s"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("substring")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token number"}},[s._v("1")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      t "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("?")]),s._v(" s"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("charAt")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("0")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("isMatch")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p"),a("span",{attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{attrs:{class:"token function"}},[s._v("substring")]),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{attrs:{class:"token number"}},[s._v("2")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br")])])])}],!1,null,null,null);r.options.__file="10_Regular_Expression_Matching.md";t.default=r.exports}}]);